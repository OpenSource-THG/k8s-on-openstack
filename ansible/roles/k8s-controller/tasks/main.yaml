---
  - name: Config br_netfilter
    copy:
      src: sysctl-k8s.conf
      dest: /etc/sysctl.d/k8s.conf

  - name: Update sysctl
    command: sysctl --system

  - name: Install docker-requirements
    yum:
      name:
        - yum-utils 
        - device-mapper-persistent-data 
        - lvm2
      state: present

  - name: Add docker repo
    command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

  - name: Yum Update
    command: yum update -y

  - name: Install Docker CE
    yum:
      name:
        - containerd.io-{{ containerd_version }}
        - docker-ce-{{ docker_ce_version }}
        - docker-ce-cli-{{ docker_ce_version }}
      state: present

  - name: make docker etc dir
    file:
      path: /etc/docker
      state: directory

  - name: copy daemon.json
    copy:
      src: daemon.json
      dest: /etc/docker/daemon.json

  - name: make systemd dir
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory

  - name: daemon-reload
    command: systemctl daemon-reload

  - name: restart docker
    command: systemctl restart docker

  - name: enable docker
    command: systemctl enable docker

  - name: Install k8s packages
    yum:
      name: 
        - kubeadm
        - kubelet
        - kubectl
      state: present

  - name: enable kubelet
    command: systemctl enable kubelet
      
  # request lock in consul to execute these
  - name: Check whether another node is running init
    uri:
      url: http://localhost:8500/v1/kv/k8s/kubeadm-init
      status_code: 200, 404
      use_proxy: no
    register: kubeadm_init_state

  - name: set fact cluster_initialising
    set_fact: cluster_initialising={% if kubeadm_init_state.status == 200 %}true{% else %}false{% endif %}

  - name: Gain consul lock to initialise cluster
    block:
    - name: Create new consul session
      uri:
        url: http://localhost:8500/v1/session/create
        method: PUT
        body: '{"Name": "k8s-kubeadm-init", "TTL": "600s"}'
        body_format: json
        use_proxy: no
      register: consul_session
    - name: Request lock on consul value
      uri:
        url: http://localhost:8500/v1/kv/k8s/kubeadm-init?acquire={{ consul_session.json.ID }}
        method: PUT
        body: 'true'
        body_format: json
        use_proxy: no
      register: consul_k8s_init_lock
    when: not cluster_initialising

  - name: Initialise kubeadm
    block:
      - name: generate certifcate key
        command: kubeadm alpha certs certificate-key
        register: k8s_certificate_key

      - set_fact:
          key: "{{ k8s_certificate_key.stdout }}"

      - name: upload cert key to consul
        command: consul kv put k8s_certificate_key {{ key }}

      - name: init
        command: kubeadm init --control-plane-endpoint {{ ansible_eth0.ipv4.address }}:6443 --upload-certs --pod-network-cidr {{ pod_subnet }} --certificate-key {{ key }} --apiserver-cert-extra-sans=127.0.0.1

      - name: create join token
        command: kubeadm token create
        register: k8s_join_token

      - set_fact:
          token: "{{ k8s_join_token.stdout }}"

      - name: upload join token to consul
        command: consul kv put k8s_join_token {{ token }}

      - name: get k8s_join_token_hash
        shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
        register: k8s_join_token_hash

      - set_fact:
          token_hash: "{{ k8s_join_token_hash.stdout }}"

      - name: upload join hash to consul
        command: consul kv put k8s_join_token_hash {{ token_hash }}

      - name: register this node as the controller to join
        command: consul kv put first_controller {{ ansible_eth0.ipv4.address }}

      - name: create kube dir
        file:
          path: /root/.kube
          state: directory

      - name: copy kube conf
        command: cp -i /etc/kubernetes/admin.conf /root/.kube/config

      - name: fetch calico
        get_url:
          url: https://docs.projectcalico.org/manifests/calico.yaml
          dest: /tmp/calico.yaml
          mode: '0644'

      - name: apply pod networking
        command: kubectl --kubeconfig=/root/.kube/config apply -f /tmp/calico.yaml

      - name: Mark cluster as initialised
        uri:
          url: http://localhost:8500/v1/kv/k8s/cluster-initialised?acquire={{ consul_session.json.ID }}
          method: PUT
          body: 'true'
          body_format: json
          use_proxy: no

    when: not cluster_initialising and consul_k8s_init_lock.json == true

  - name: wait for k8s to become initialised
    uri:
      url: http://localhost:8500/v1/kv/k8s/cluster-initialised
      status_code: 200
      use_proxy: no
    register: initialised_state
    until: initialised_state.status == 200
    retries: 100
    delay: 20

  - name: fetch controller node ipv4
    command: consul kv get first_controller
    register: controller_ip

  - name: join or not (additional controller nodes after first controller)?
    set_fact: join={% if ansible_eth0.ipv4.address != controller_ip.stdout%}true{% else %}false{% endif %}

  - name: join k8s cluster
    block:
      - name: fetch cert key
        command: consul kv get k8s_certificate_key
        register: key

      - name: fetch k8s_join_token
        command: consul kv get k8s_join_token
        register: join_token

      - name: fetch hash
        command: consul kv get k8s_join_token_hash
        register: hash

      - name: join
        command: kubeadm join --token {{ join_token.stdout }} {{ controller_ip.stdout }}:6443 --discovery-token-ca-cert-hash sha256:{{ hash.stdout }} --control-plane --certificate-key {{ key.stdout }}
          
    when: join